/**
 * Tests for Cantina Views Plugin.
 */

var assert = require('assert'),
    path = require('path'),
    request = require('request'),
    cantina = require('cantina'),
    views = require('../');

describe('Cantina Views: Plugin', function() {
  var app;
  var options = {
    root: __dirname,
    name: 'cantina-views-test-plugin',
    version: '0.0.1',
    silent: true,
    amino: false,
    port: 3000
  };

  describe('Rendering & Helpers', function() {
    // Create a fresh app before each test.
    beforeEach(function(done) {
      app = cantina.createApp(options);
      app.use(views.plugin, {
        path: 'fixtures/views'
      });
      app.start(done);
    });

    // Stop the app after each test.
    afterEach(function(done) {
      app.stop(done);
    });

    it('should be able to render templates with data', function(done) {
      app.router.get('hello', function() {
        this.render('hello', {name: 'Leonardo'});
      });
      request('http://localhost:' + options.port + '/hello', function(err, res, body) {
        assert.ifError(err);
        assert.equal(body, '<html><body><h1>Hello Leonardo</h1></body></html>', 'template was rendered incorrectly');
        done();
      });
    });

    it('should be able to render templates with static helpers', function(done) {
      app.views.helper({name: 'Donatello'});
      app.router.get('hello', function() {
        this.render('hello');
      });
      request('http://localhost:' + options.port + '/hello', function(err, res, body) {
        assert.ifError(err);
        assert.equal(body, '<html><body><h1>Hello Donatello</h1></body></html>', 'template was rendered incorrectly');
        done();
      });
    });

    it('should be able to render templates with dynamic helpers', function(done) {
      app.views.helper(function(cb) {
        cb(null, {name: 'Michelangelo'});
      });
      app.router.get('hello', function() {
        this.render('hello');
      });
      request('http://localhost:' + options.port + '/hello', function(err, res, body) {
        assert.ifError(err);
        assert.equal(body, '<html><body><h1>Hello Michelangelo</h1></body></html>', 'template was rendered incorrectly');
        done();
      });
    });

    it('should be able to render templates with no layout', function(done) {
      app.router.get('hello', function() {
        this.render('hello', {name: 'Raphael', layout: false});
      })
      request('http://localhost:' + options.port + '/hello', function(err, res, body) {
        assert.ifError(err);
        assert.equal(body, '<h1>Hello Raphael</h1>', 'template was rendered incorrectly');
        done();
      });
    });

    it('should be able to render templates with a non-default layout', function(done) {
      app.router.get('hello', function() {
        this.render('hello', {name: 'Raphael', layout: 'layout2'});
      })
      request('http://localhost:' + options.port + '/hello', function(err, res, body) {
        assert.ifError(err);
        assert.equal(body, '<html><body><div><h1>Hello Raphael</h1></div></body></html>', 'template was rendered incorrectly');
        done();
      });
    });

    it('should respect String path-specific helpers', function(done) {
      app.views.helper('/hello', {name: 'Donatello'});
      app.router.get('hello', function() {
        this.render('hello');
      });
      app.router.get('hey', function() {
        this.render('hello');
      });
      request('http://localhost:' + options.port + '/hello', function(err, res, body) {
        assert.ifError(err);
        assert.equal(body, '<html><body><h1>Hello Donatello</h1></body></html>', 'template was rendered incorrectly');

        request('http://localhost:' + options.port + '/hey', function(err, res, body) {
          assert.ifError(err);
          assert.equal(body, '<html><body><h1>Hello </h1></body></html>', 'template was rendered incorrectly');
          done();
        });
      });
    });

    it('should respect RegExp path-specific helpers', function(done) {
      app.views.helper(/^\/hello$/, {name: 'Donatello'});
      app.router.get('hello', function() {
        this.render('hello');
      });
      app.router.get('hey', function() {
        this.render('hello');
      });
      request('http://localhost:' + options.port + '/hello', function(err, res, body) {
        assert.ifError(err);
        assert.equal(body, '<html><body><h1>Hello Donatello</h1></body></html>', 'template was rendered incorrectly');

        request('http://localhost:' + options.port + '/hey', function(err, res, body) {
          assert.ifError(err);
          assert.equal(body, '<html><body><h1>Hello </h1></body></html>', 'template was rendered incorrectly');
          done();
        });
      });
    });

    it('should be process `_json_` helpers', function(done) {
      var data = {name: 'April', job: 'reporter'};
      app.views.helper({
        _json_: {
          character: data
        }
      });
      app.router.get('character', function() {
        this.render('character', {layout: false});
      });
      request('http://localhost:' + options.port + '/character', function(err, res, body) {
        assert.ifError(err);
        assert.deepEqual(body, JSON.stringify(data));
        done();
      });
    });

    it('should not allow dynamic helpers to modify static helper data', function(done) {
      var ran = false,
          data = {
            weapons: {
              leo: 'sword',
              don: 'bow',
            }
          },
          result = {},
          scope = null,
          all = {
            weapons: {
              leo: 'sword',
              don: 'bow',
              raph: 'sai',
              mike: 'nunchuck'
            }
          };

      app.views.helper(data);
      app.views.helper(function(cb) {
        if (!ran) {
          ran = true;
          cb(null, {
            weapons: {
              raph: 'sai'
            }
          });
        }
        else {
          cb(null, {
            weapons: {
              mike: 'nunchuck'
            }
          });
        }
      });

      scope = {req: {url: '/'}};
      app.views._processHelpers.call(scope, result, function(err) {
        scope = {req: {url: '/'}};
        app.views._processHelpers.call(scope, result, function(err) {
          assert.deepEqual(result, all);
          assert.notDeepEqual(data, all);
          done();
        });
      });
    });

    it('should be able to render status code templates', function(done) {
      app.router.get('404', function() {
        this.renderStatus(404);
      });
      request('http://localhost:' + options.port + '/404', function(err, res, body) {
        assert.ifError(err);
        assert.equal(body, '<html><body><h1>404</h1><p>404 - Page not found</p></body></html>');
        done();
      });
    });

    it('should be able to render status code with NO template', function(done) {
      app.router.get('403', function() {
        this.renderStatus(403);
      });
      request('http://localhost:' + options.port + '/403', function(err, res, body) {
        assert.ifError(err);
        assert.equal(body, '403 - Access denied');
        done();
      });
    });

    it('should be able to render status code with NO template and a custom message', function(done) {
      app.router.get('500', function() {
        this.renderStatus(500, 'Opps! Something broke!');
      });
      request('http://localhost:' + options.port + '/500', function(err, res, body) {
        assert.ifError(err);
        assert.equal(body, 'Opps! Something broke!');
        done();
      });
    });
  });

  describe('Registry', function() {
    // Create a fresh app before each test.
    beforeEach(function(done) {
      app = cantina.createApp(options);
      app.use(views.plugin, {
        path: 'fixtures/views'
      });
      app.start(done);
    });

    // Stop the app after each test.
    afterEach(function(done) {
      app.stop(done);
    });

    it('should find and render templates in a registered namespace', function(done) {
      app.views.register('alt', path.resolve(__dirname, 'fixtures/views-alt'));
      app.router.get('hello', function() {
        this.render('alt/hello', {name: 'Splinter'});
      });
      request('http://localhost:' + options.port + '/hello', function(err, res, body) {
        assert.ifError(err);
        assert.equal(body, '<html><body><h1>Hi Splinter</h1></body></html>', 'template was rendered incorrectly');
        done();
      });
    });

    it('should find and render templates with an alternate extension', function(done) {
      app.views.register('alt', path.resolve(__dirname, 'fixtures/views-alt'));
      // Prime the views registry cache with the .hbs version of alt/hello.
      app.views.find('alt/hello', {ext: 'hbs'});
      // The callback for this route specifically asks for the .html version.
      app.router.get('hello', function() {
        this.render('alt/hello', {name: 'Shredder', ext: 'html'});
      });
      request('http://localhost:' + options.port + '/hello', function(err, res, body) {
        assert.ifError(err);
        assert.equal(body, '<html><body><h1>Hey Shredder</h1></body></html>', 'template was rendered incorrectly');
        done();
      });
    });
  });

  describe('Partials', function() {
    // Create a fresh app before each test.
    beforeEach(function(done) {
      app = cantina.createApp(options);
      app.use(views.plugin, {
        path: 'fixtures/views'
      });
      app.start(done);
    });

    // Stop the app after each test.
    afterEach(function(done) {
      app.stop(done);
    });

    it('should render templates with partials applied', function(done) {
      app.views.partials('partials');
      app.router.get('hello', function() {
        this.render('hello-turtle', {first: 'Casey', last: 'Jones'});
      });
      request('http://localhost:' + options.port + '/hello', function(err, res, body) {
        assert.ifError(err);
        assert.equal(body, '<html><body><h1>Hello Casey Jones</h1></body></html>', 'template was rendered incorrectly');
        done();
      });
    });
  });

  describe('Errors', function() {
    it('should throw an error for a non-http app', function() {
      app = cantina.createApp({
        mode: 'cli'
      });

      assert.throws(
        function() {
          app.use(views.plugin, {
            path: 'fixtures/views'
          });
        },
        /only be used with `http` apps/,
        'The error was not thrown or the message was wrong.'
      );
    });

    it('should throw an error if the layout doesn\'t exist', function() {
      app = cantina.createApp(options);

      assert.throws(
        function() {
          app.use(views.plugin, {
            path: 'fixtures/views',
            layout: 'bad'
          });
        },
        /layout does not exist/,
        'The error was not thrown or the message was wrong.'
      );
    });
  });
});
